-- SQLBook: Markup
# Quiz 4
-- SQLBook: Markup
## Submit this file. No need to convert to HTML
-- SQLBook: Markup
<font size = "5">
Write your name as a comment (use double dash)
-- SQLBook: Code
-- Active: 1679494009918@@127.0.0.1@5432@postgres
"William Xu"
-- SQLBook: Markup
<font size = "5" >
This quiz is open book 

- You can use the lecture notes
- You will get partial credit for attempting the questions
- To get full credit, the code should run as intended
- You should <span style="color:red"> NOT </span> communicate with other students

Write the following message as a comment: <br>

"I will abide by Emory's code of conduct"

-- SQLBook: Code
"I will abide by Emory's code of conduct"
-- SQLBook: Markup

<font size = "5">

(a) Create an empty table for "constructor_standings"

$\quad$ <img src="figures/constructor_standings_codebook.png" alt="drawing" width="400"/>

<font size = "3">

- Run the command ``` DROP TABLE IF EXISTS constructor_standings; ```
- Use the command ```CREATE TABLE constructor_standings (... ) ``` to create an <br>
empty table with the headers of the table, using the information in <br>
the image and following the instructions in Lecture 18.

HINT: Include any column names with upper case in doube quotations, <br> e.g.
"raceId". If you don't you'll get an error
-- SQLBook: Code
-- Write your own code
DROP TABLE IF EXISTS construcutor_standings;
CREATE TABLE constructor_standings(
    "constructor"
    "raceId"  int,
    "constructorId" int,
    constructor int,
    position int,
    time VARCHAR(255),
    wins int
);

COPY constructor_standings
FROM '/Desktop/quiz4 - Section 4/figures/constructor_standings.csv' DELIMITER ',' CSV HEADER;;


-- SQLBook: Markup
<font size = "5">

(b) Use the the command ``` COPY ``` to import the rows <br>
of "data_raw/constructor_standings.csv"

<font size = "3">

HINT: Remember that you have to find the pathname of the <br>
".csv" file. See Lecture 18 for details. See the additional <br>
lectures for how to handle the permissions. <br>

(Optional note): If you are importing the data through the SQL terminal <br>
(rather than through the notebook), please include the code <br>
you are running and add a comment that you used the terminal
-- SQLBook: Code
-- Write your own code

DROP TABLE IF EXISTS drivers;
CREATE TABLE drivers(
    "driverId" int,
    "driverRef" VARCHAR(255),
    number  Varchar(255),
    code   VARCHAR(3),
    forename VARCHAR(225),
    surname  VARCHAR(255),
    dob  VARCHAR(255),
    nationality VARCHAR(255),
    url VARCHAR(255)
);

COPY drivers
FROM '/private/tmp/data_raw/drivers.csv' DELIMITER ',' CSV HEADER;;

SELECT*FROM drivers



-- SQLBook: Markup
<font size = "5">

(c) Subset and sort

<font size = "3">

- SELECT all the columns FROM the constructor_standings dataset
- Then subset rows with 6 $\le$ position $\le$ 10 using <br>
 ``` WHERE ```
- Then sort the datasets in ascending order of <br>
"wins"

HINT: Remember to always refer to column names with at <br>
least one capital letter with double quotations, e.g. "driverId" <br>
HINT: See Lecture 17
-- SQLBook: Code
-- Write your own code
SELECT *
FROM lap_times
WHERE (lap = 1) or (lap = 2)   --before aggregate
ORDER BY milliseconds ASC; --having() after aggregate


-- SQLBook: Markup
<font size = "5">

(d) Groupby + Aggregate


<font size = "3">

- Compute the average and the maxmum of "wins", <br>
grouped by "raceId" using SELECT, FROM, and GROUP BY.


HINT: See the end of lectures 17
-- SQLBook: Code
-- Write your own code

SELECT 
    nationality,               -- select the nationality column
    SUM("driverId") AS sum_driverId,   -- sum the driverId column and name it sum_driverId
    AVG("driverId") AS mean_driverId,  -- calculate the average of the driverId column and name it mean_driverId
    MIN("driverId") AS min_driverId,   -- find the minimum value of the driverId column and name it min_driverId
    MAX("driverId") AS max_driverId    -- find the maximum value of the driverId column and name it max_driverId
FROM 
    drivers                     -- select data from the drivers table
WHERE 
    (nationality = 'German') OR (nationality = 'Columbia')  -- filter for records with either German or Columbian nationality
GROUP BY 
    nationality                 -- group the results by nationality
HAVING 
    SUM("driverId") > 50  


-- SQLBook: Markup

<font size = "5">

(e) Groupby + Aggregate + Sort

<font size = "3">

- Select the "raceId" column and count the total <br>
number of rows by "raceId" ```GROUP BY``` <br>
 - Then sort by the count of the rows using ```ORDER BY``` <br>
 in descending order

HINT: Remember to include "driverId" in double <br>
quotations it includes a mix of lower case and upper case letters
-- SQLBook: Code
-- Write your own code

SELECT "driverId", COUNT(*) AS num_parties 
FROM lap_times 
GROUP BY "driverId"
HAVING COUNT(*) > 15
ORDER BY COUNT(*) desc




-- SQLBook: Markup

<font size = "5">

(e) Groupby + Aggregate + Subset

<font size = "3">

- Select the "raceId" and count the total <br>
number of rows by "raceId" ```GROUP BY``` <br>
 - Then subset drivers with 15 rows or more <br>
 using ```HAVING ```
-- SQLBook: Code
-- Write your own code



SELECT "driverId", COUNT(*) AS num_parties 
FROM lap_times 
GROUP BY "driverId"
HAVING COUNT(*) > 15;

-- SQLBook: Code

-- BASIC SYNTAX OF SQL:

-- Commands separated by a semicolon ";"
-- Commands in upper case, inputs lower case
-- Include comments with two dashes "--"
-- Arguments in parenthesis, separated by a comma ","
-- For strings, use single quotations '...', not double "...".